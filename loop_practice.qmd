---
title: "EDS 221 Day 3 Morning Practice"
author: "BJ"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
---

```{r}
pinyon_pine <- 14
lodgepole <- 46

#Boolean logical expressions
pinyon_pine == 10

pinyon_pine < lodgepole

pinyon_pine != 25
```

## Conditionals
```{r}
burrito <- 1.4

#write a short if statement
if(burrito > 2) {
  print("I love burritos!")
}
```

```{r}
#if else statement
pika <- 89.1

if (pika > 60) {
  print("mega pika!")
} else
  print("normal pika")
```

```{r}
#if else if else statement
marmot <-.25

if (marmot < 0.5) {
  print("a small marmot")
} else if (marmot >= 0.5 & marmot < 3) {
  print("a medium marmot")
} else
  print("a large marmot")
```

```{r}
library(stringr)

#experimenting with strings

my_ships <- c("Millenium Falcon",
              "X-wing",
              "Tie-Fighter",
              "Death Star")

str_detect(my_ships, pattern = "r")
```

```{r}
phrase <- "I love burritos"

if(str_detect(phrase, "love")) {
  print("burrito fan!")
}
```

```{r}
#switch statements

species <- "mouse"

switch(species, 
       "cat" = print("meow"),
       "dog" = print("woof"),
       "mouse" = print("squeak"))

#similar to

if (species == "cat") {
  print("meow")
} else if (species == "dog") {
  print("woof")
} else if (species == "mouse") {
  print("squeak")
}

```

## For loops!

```{r}
dog_names <- c("Teddy", "Khora", "Banjo", "Waffle")

for (pupster in dog_names) {
  print(paste0("My dog's name is", pupster, "."))
}
```

```{r}
#another loops example
mass <- seq(from = 0, to = 3, by = 0.5)

for (i in mass) {
  new_value <- i +2
  print(new_value)
}

```


```{r}

#another example with sequences

mass <- seq(from = 0, to = 3, by = 0.5)

for (i in seq_along(mass)) {
  new_value <- mass[i] +2
  print(new_value)
}
```

```{r}
tree_height <- c(1,2,6,10)

for (i in seq_along(tree_height)) {
  new_value <- tree_height[i] + tree_height[i +1]
  print(new_value)
}

```

## For loops with conditionals 

```{r}
animal <- c("cat", "dog", "dog", "zebra", "dog")

for (i in seq_along(animal)) {
  if (animal[i] == "dog") {
  print("I love dogs!")
} else
  print("this is not a dog")}

```

```{r}
species <- c("dog", "elephant", "goat", "dog", "dog", "elephant")

age_human <- c(3, 8, 4, 6, 12, 18)

for (i in seq_along(species)) {
  if (species[i] == "dog") {
  animal_age <- age_human[i] * 7
} else if (species[i] == "elephant") {
  animal_age <- age_human[i] * 0.88
} else if (species[i] == "goat") {
  animal_age <- age_human[i] * 4.7
}
print(animal_age)
```

#Storing for loop output

```{r}
#create an empty vector for animal ages
rm(list = ls())
species <- c("dog", "elephant", "goat", "dog", "dog", "elephant")

animal_ages <- vector(mode = "numeric", length = length(species))


age_human <- c(3, 8, 4, 6, 12, 18)

for (i in seq_along(species)) {
  if (species[i] == "dog") {
  animal_age <- age_human[i] * 7
} else if (species[i] == "elephant") {
  animal_age <- age_human[i] * 0.88
} else if (species[i] == "goat") {
  animal_age <- age_human[i] * 4.7
}
  animal_ages[i] <- animal_age
}
```

```{r}
tigers <- c(29, 34, 82)
lions <- c(2, 18, 6)

big_cats <- vector(mode = "numeric", length = length(tigers))

for (i in seq_along(tigers)) {
  total_cats <- tigers[i] + lions[i]
  big_cats[i] <- total_cats
}

```

##Afternoon Session

```{r}
#this is taking the mean of each column in the mcars df
mean_mtcars <- vector(mode = "numeric", length = ncol(mtcars))

for (i in 1:ncol(mtcars)) {
  mean_value <- mean(mtcars[[i]], na.rm = TRUE)
mean_mtcars[i] <- mean_value
}

```

```{r}
#this is getting the mean for each column in palmerpenguins, excluding the columns that are not nummeric. also, no NAs considered when calculating mean

#library(palmerpenguins)

for (i in seq_along(penguins)) {
  if (is.numeric(penguins[[i]])) {
  penguin_median <- median(penguins[[i]], na.rm = TRUE)
  print(penguin_median)
} else {
  print("non-numerica column")
}
}


```


```{r}
#practicing with the apply function to run the loops

apply(X = mtcars, MARGIN = 2, FUN = mean)
```

```{r}
#practicing with tidyverse to run loops, deplyr
library(tidyverse)

penguins |>
  group_by(species) |>
  summarise(across(where(is.numeric), mean, na.rm = TRUE))
```

```{r}
library(purrr)

map(.x = mtcars, .f = mean) #this returns a list
map_df(.x = mtcars, .f = mean)  #this returns a df
```


